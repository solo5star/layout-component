{"version":3,"file":"Container-cf7daf66.js","sources":["../../src/Container/Container.tsx"],"sourcesContent":["import { content, root, vars } from \"./Container.css\";\nimport { assignInlineVars } from \"@vanilla-extract/dynamic\";\nimport asCssLength from \"../asCssLength\";\nimport { PropsWithHTMLElement } from \"../types\";\n\nexport type ContainerProps<TElementType extends React.ElementType> =\n  PropsWithHTMLElement<\n    {\n      minWidth?: number | string;\n      maxWidth?: number | string;\n    },\n    TElementType\n  >;\n\nconst Container = <TElementType extends React.ElementType = \"div\">(\n  props: ContainerProps<TElementType>\n) => {\n  const { as: Element = 'div', minWidth, maxWidth, ...divProps } = props;\n\n  return (\n    <Element className={root}>\n      <div\n        {...divProps}\n        className={content}\n        style={{\n          ...divProps.style,\n          ...assignInlineVars({\n            [vars.minWidth]: asCssLength(minWidth ?? \"initial\"),\n            [vars.maxWidth]: asCssLength(maxWidth ?? \"initial\"),\n          }),\n        }}\n      />\n    </Element>\n  );\n};\n\nexport default Container;\n"],"names":["Container","props","Element","minWidth","maxWidth","divProps","jsx","root","content","assignInlineVars","vars","asCssLength"],"mappings":"gJAcA,MAAAA,EAAAC,GAAA,CAGE,KAAA,CAAA,GAAAC,EAAA,MAAA,SAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAJ,EAEA,OAAAK,EAAAA,IAAAJ,EAAA,CAAA,UAAAK,EAAA,SAAAD,EAAA,IAEI,MAAC,CAAA,GAAAD,EACK,UAAAG,EACO,MAAA,CACJ,GAAAH,EAAA,MACO,GAAAI,EAAA,CACQ,CAAAC,EAAA,QAAA,EAAAC,EAAAR,GAAA,SAAA,EACgC,CAAAO,EAAA,QAAA,EAAAC,EAAAP,GAAA,SAAA,CACA,CAAA,CACnD,CACH,CAAA,CAAA,CAAA,CAIR"}